{"version":3,"file":"static/js/292.e23657e4.chunk.js","mappings":"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","sources":["webpack://my-app/./src/pages/Profile/Profile.module.css?c3cc","pages/Profile/Profile.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"loginMainContainer\":\"Profile_loginMainContainer__GpNnB\",\"login\":\"Profile_login__Kz02v\",\"formGroup\":\"Profile_formGroup__Tv425\",\"labelField\":\"Profile_labelField__Fa4ek\",\"label\":\"Profile_label__iy+Ru\",\"input\":\"Profile_input__n-VB3\",\"error\":\"Profile_error__U19sy\",\"button\":\"Profile_button__iEPn4\",\"success\":\"Profile_success__FGgow\"};","import React, { useEffect, useState } from \"react\";\r\nimport { Header } from \"../../shared/components/Header/Header\";\r\nimport s from \"./Profile.module.css\";\r\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\r\nimport { Link, Navigate } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  registerUser ,\r\n  loginUser ,\r\n  checkUser ,\r\n  toggleLogin,\r\n} from \"./authSlice\";\r\nimport { AppDispatch } from \"../../store/store\";\r\n\r\ntype AuthStateType = {\r\n    isLogin: boolean;\r\n    redirectToProfile: boolean;\r\n    loginErrorMessage: string;\r\n    registrationErrorMessage: string;\r\n    successMessage: string;\r\n}\r\ntype RootState = {\r\n  auth: AuthStateType;\r\n}\r\n\r\nconst validate = (values: { email: string; password: string }) => {\r\n  const errors: { email?: string; password?: string } = {};\r\n  if (!values.email) {\r\n    errors.email = \"Некорректный email\";\r\n  } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\r\n    errors.email = \"Некорректный email\";\r\n  }\r\n  if (!values.password) {\r\n    errors.password = \"Минимальная длина 8 символов\";\r\n  }\r\n  return errors;\r\n};\r\n\r\n const Profile: React.FC = () => {\r\n  const dispatch = useDispatch<AppDispatch>();\r\n  const {\r\n    isLogin,\r\n  redirectToProfile,\r\n  loginErrorMessage,\r\n  registrationErrorMessage,\r\n  successMessage,\r\n  } = useSelector((state: RootState) => state.auth);\r\n\r\n  const [showSuccessMessage, setShowSuccessMessage] = useState(false);\r\n  const [showErrorMessageReg, setShowErrorMessageReg] = useState(false);\r\n  const [showErrorMessageLog, setShowErrorMessageLog] = useState(false);\r\n  const [isLoginForm, setIsLoginForm] = useState(true); // New state variable\r\n\r\n  useEffect(() => {\r\n    dispatch(checkUser ());\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (successMessage) {\r\n      setShowSuccessMessage(true);\r\n      const timer = setTimeout(() => {\r\n        setShowSuccessMessage(false);\r\n      }, 3000); // Скрыть сообщение через 3 секунды\r\n\r\n      return () => clearTimeout(timer); // Очистить таймер при размонтировании\r\n    }\r\n  }, [successMessage]);\r\n\r\n  useEffect(() => {\r\n    if (registrationErrorMessage) {\r\n      setShowErrorMessageReg(true);\r\n      const timer = setTimeout(() => {\r\n        setShowErrorMessageReg(false);\r\n        // Сбросить сообщение об ошибке\r\n         // или другой метод для сброса сообщения\r\n      }, 3000); // Скрыть сообщение через 3 секунды\r\n  \r\n      return () => clearTimeout(timer); // Очистить таймер при размонтировании\r\n    }\r\n  }, [registrationErrorMessage]);\r\n \r\n  useEffect(() => {\r\n    if (loginErrorMessage) {\r\n      setShowErrorMessageLog(true);\r\n      const timer = setTimeout(() => {\r\n        setShowErrorMessageLog(false);\r\n      }, 3000); // Скрыть сообщение через 3 секунды\r\n\r\n      return () => clearTimeout(timer); // Очистить таймер при размонтировании\r\n    }\r\n  }, [loginErrorMessage]);\r\n\r\n  const handleLoginClick = () => {\r\n    setIsLoginForm(true); // Set to login form\r\n  };\r\n\r\n  const handleRegisterClick = () => {\r\n    setIsLoginForm(false); // Set to registration form\r\n  };\r\n\r\n  if (redirectToProfile || isLogin) {\r\n    return <Navigate to=\"/user-profile\" />;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <div className={s.loginMainContainer}>\r\n        <div className={s.login}>\r\n          {isLoginForm ? (\r\n            <>\r\n              <h1>Авторизация</h1>\r\n              {showErrorMessageLog && <div className={s.error}>{loginErrorMessage}</div>} {/* Display login error message */}\r\n              <Formik\r\n                initialValues={{ email: \"\", password: \"\" }}\r\n                validate={validate}\r\n                onSubmit={(values, { setSubmitting }) => {\r\n                  dispatch(loginUser (values)).then(() => {\r\n                    setSubmitting(false);\r\n                  });\r\n                }}\r\n              >\r\n                <Form>\r\n                  <div className={s.formGroup}>\r\n                    <div className={s.labelField}>\r\n                      <label className={s.label} htmlFor=\"email\">Email</label>\r\n                      <Field className={s.input} type=\"email\" name=\"email\" id=\"email\" />\r\n                    </div>\r\n                    <ErrorMessage className={s.error} name=\"email\" component=\"div\" />\r\n                    <div className={s.labelField}>\r\n                      <label className={s.label} htmlFor=\"password\">Пароль</label>\r\n                      <Field className={s.input} type=\"password\" name=\"password\" id=\"password\" />\r\n                    </div>\r\n                    <ErrorMessage className={s.error} name=\"password\" component=\"div\" />\r\n                  </div>\r\n                  <button className={s.button} type=\"submit\">Войти</button>\r\n                </Form>\r\n              </Formik>\r\n              <button type=\"button\" className={s.button} onClick={handleRegisterClick}>У меня нет аккаунта</button>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <h1>Регистрация</h1>\r\n              <Formik\r\n                initialValues={{ email: \"\", password: \"\" }}\r\n                validate={validate}\r\n                onSubmit={(values, { setSubmitting }) => {\r\n                  dispatch(registerUser (values)).then(() => {\r\n                    setSubmitting(false);\r\n                  });\r\n                }}\r\n              >\r\n                {({ isSubmitting }) => (\r\n                  <Form>\r\n                    <div className={s.formGroup}>\r\n                      <div className={s.labelField}>\r\n                        <label className={s.label} htmlFor=\"email\">\r\n                          Email\r\n                        </label>\r\n                        <Field\r\n                          className={s.input}\r\n                          type=\"email\"\r\n                          name=\"email\"\r\n                          id=\"email\"\r\n                        />\r\n                      </div>\r\n                      <ErrorMessage\r\n                        className={s.error}\r\n                        name=\"email\"\r\n                        component=\"div\"\r\n                      />\r\n\r\n                      <div className={s.labelField}>\r\n                        <label className={s.label} htmlFor=\"password\">\r\n                          Пароль\r\n                        </label>\r\n                        <Field\r\n                          className={s.input}\r\n                          type=\"password\"\r\n                          name=\"password\"\r\n                          id=\"password\"\r\n                        />\r\n                      </div>\r\n                      <ErrorMessage\r\n                        className={s.error}\r\n                        name=\"password\"\r\n                        component=\"div\"\r\n                      />\r\n                    </div>\r\n                    {showErrorMessageReg && (\r\n                    <div className={s.error}>{registrationErrorMessage}</div>\r\n                  )}\r\n                    {showSuccessMessage && (\r\n                      <div className={s.success}>{successMessage}</div>\r\n                    )}\r\n                    <button\r\n                      className={s.button}\r\n                      type=\"submit\"\r\n                      disabled={isSubmitting}\r\n                    >\r\n                      Зарегистрироваться\r\n                    </button>\r\n                  </Form>\r\n                )}\r\n              </Formik>\r\n\r\n              <button type=\"button\" className={s.button} onClick={handleLoginClick}>\r\n                У меня уже есть аккаунт\r\n              </button>\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Profile;"],"names":["validate","values","errors","email","test","password","Profile","dispatch","useDispatch","isLogin","redirectToProfile","loginErrorMessage","registrationErrorMessage","successMessage","useSelector","state","auth","showSuccessMessage","setShowSuccessMessage","useState","showErrorMessageReg","setShowErrorMessageReg","showErrorMessageLog","setShowErrorMessageLog","isLoginForm","setIsLoginForm","useEffect","checkUser","timer","setTimeout","clearTimeout","_jsx","Navigate","to","_jsxs","_Fragment","children","Header","className","s","Formik","initialValues","onSubmit","_ref","setSubmitting","loginUser","then","Form","htmlFor","Field","type","name","id","ErrorMessage","component","onClick","handleRegisterClick","_ref2","registerUser","_ref3","isSubmitting","disabled","handleLoginClick"],"sourceRoot":""}